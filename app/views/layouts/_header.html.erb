<header class="grid-container w-full border-b lg:gap-y-0">
  <div class="col-span-full flex items-center justify-center max-h-[70px] lg:justify-between lg:gap-x-6  py-4 px-5 lg:px-20 border-b">

    <%# hamburger bar %>
    <div class="flex items-center justify-center w-8 h-8 py-10 lg:py-2 lg:px-10 lg:hidden">
       <button class="lg:hidden navbar-burger text-coolGray-400 hover:text-coolGray-600" aria-controls="navbar-default" aria-expanded="false" data-action="click->drawer#toggle">
                <svg width="24" height="24" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M3 12H21" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                  <path d="M3 6H21" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                  <path d="M3 18H21" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                </svg>
      </button>
    </div>

    <%# navbar %>
    <div class="relative flex items-center gap-x-4 xl:gap-x-8 w-full justify-center lg:justify-start">
      
      <%# logo %>
      <%= link_to root_path, class: 'absolute lg:relative left-1/2 lg:left-0 lg:-translate-x-0 -translate-x-1/2 flex items-center space-x-3 lg:w-52 w-[150px]' do %>
        <%= image_tag "tennisworld_logo.png" %>
      <% end %>

      <%# search bar %>
      <%= render 'shared/search/search_bar', taxons: taxons, taxon: taxon, :locals => { :additional_classes => 'hidden lg:flex lg:ml-60 xl:ml-80' } %>

      <% categories = taxonomies.first %>
      <% navMobileClasses = '
        categories-menu bg-white
        fixed top-0 left-0 z-40 max-w-[80%] min-w-[270px] h-full
        transition-transform duration-300 ease-in-out -translate-x-full
        flex flex-col
        dark:bg-black dark:text-white text-black dark:lg:text-sand
        px-8 py-5 text-body-sm'
      %>
      <% navDesktopClasses = '
        lg:relative lg:z-0 lg:h-14 lg:py-3 lg:px-20 lg:max-h-[70px] lg:transition-none lg:translate-x-0 lg:min-w-[1024px] xl:min-w-[1280px]
        lg:flex-row lg:items-center
        dark:lg:text-sand'
      %>

    </div>

    <%# top bar (baruun) %>
    <%= render 'layouts/top_bar', taxons: taxons, taxon: taxon %>
    
  </div>
      <nav id="nav" class="<%= navMobileClasses + navDesktopClasses %> text-" data-drawer-target="drawer">
        <button type="button" class="w-8 h-8 self-start -ml-[5px] lg:hidden" aria-controls="navbar-default" aria-expanded="false" data-action="click->drawer#toggle">
          <span class="sr-only">Close main menu</span>
          <svg class='w-8 h-8 fill-gray-500'>
            <use xlink:href="<%= image_path('remixicon.symbol.svg') %>#ri-close-line"></use>
          </svg>
        </button>

        <div class="block my-12">
          <%= render 'shared/search/search_bar', taxons: taxons, taxon: taxon, :locals => { :additional_classes => 'lg:hidden', search_input_id: 'mobile-search-input-area', results_list_id: 'autocomplete-results-mobile' } %>
        </div>

        <%# <div class="flex justify-between"> %>
        <div class="nav-text">
          <% cache [I18n.locale, categories, taxon] do %>
            <%= render(TaxonsTreeComponent.new(
              root_taxon: categories.root,
              current_taxon: taxon,
              max_level: 2,
              item_classes: 'font-sans-md',
              current_item_classes: 'text-purple-600',
              )) if categories %>
          <% end %>
        </div>
        <%# <p class="px-2 py-1 rounded bg-red-400 text-white ml-4"><a href="#">Хямдралтай</a></p> %>
        <%# </div> %>
        
      </nav>
</header>

<style>
  #nav ul li {
    <%# width: 100%; %>
    position: relative;
    margin-right: 30px;
  }
  #nav img {
    width: 10px;
  }
  #nav ul li a {
    font-size: 0.9rem;
    font-weight: 300;
  }
  .toggle-menu {
    display: block !important;
  }
  .hide{
    display: none;
  }
  #nav ul li ul {
    width: 100px;
    height: auto;
    position: absolute;
    display: none;
    top: 20px;
  }
  #nav ul li ul li {
    background: #f7f7f7;
    width: 150px;
    margin-left: 0;
    padding: 8px 20px;
    text-align: left;
  }
  #nav ul li ul li:hover {
    background: #ededed;
    }

  #nav ul li ul li:first-child {
    margin-top: 10px;
  }

  .has-child {
    position: relative;
  }
  .arrow {
  position: absolute;
  top: 5px;
  right: -25px;
  content: "";
  display: block;
  width: 8px;
  height: 8px;
  border-right: 0.1em solid black;
  border-top: 0.1em solid black;
  transform: rotate(135deg);
  margin-right: 0.5em;
  margin-left: 0.50em;
  cursor: pointer;
  }

  @media only screen and (max-width: 991px) {
    #nav ul li ul {
      width: 100%;
      height: auto;
      position: relative;
      display: none;
      top: 0px;
    }
    #nav ul li ul li {
      margin: 0;
      width: 100%;
    }
  }
</style>


<script>
  let parentCategory = document.querySelectorAll(".has-child");

  // 各要素に.arrowを追加
  parentCategory.forEach((el) => {
    el.innerHTML += "<span class='arrow'></span>";
  });

  // .arrow要素にクリックイベントを追加
  parentCategory.forEach((el) => {
    let arrow = el.querySelector('.arrow');
    arrow.addEventListener('click', function(event) {
      // 他の.arrowをクリックしたとき
      if (event.target !== arrow) {
        return;
      }

      // すべての.has-child要素からtoggle-menuクラスを削除
      parentCategory.forEach((otherEl) => {
        if (otherEl !== el) {
          let otherUlElement = otherEl.querySelector('ul');
          if (otherUlElement) {
            otherUlElement.classList.remove('toggle-menu');
          }
        }
      });

      // クリックされた.arrowの親要素からtoggle-menuクラスをトグル
      let ulElement = el.querySelector('ul');
      if (ulElement) {
        ulElement.classList.toggle('toggle-menu');
      }
    });
  });

  // ドキュメント全体にクリックイベントを追加
  document.addEventListener('click', function(event) {
    // クリックされた要素が.has-child要素でない場合、すべての.toggle-menuクラスを削除
    if (!event.target.closest('.has-child')) {
      parentCategory.forEach((el) => {
        let ulElement = el.querySelector('ul');
        if (ulElement) {
          ulElement.classList.remove('toggle-menu');
        }
      });
    }
  });
</script>



